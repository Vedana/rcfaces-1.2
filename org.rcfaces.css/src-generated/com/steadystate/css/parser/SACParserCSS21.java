/* Generated By:JavaCC: Do not edit this line. SACParserCSS21.java */
package com.steadystate.css.parser;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.w3c.css.sac.CSSParseException;
import org.w3c.css.sac.Condition;
import org.w3c.css.sac.LexicalUnit;
import org.w3c.css.sac.Locator;
import org.w3c.css.sac.Parser;
import org.w3c.css.sac.Selector;
import org.w3c.css.sac.SelectorList;
import org.w3c.css.sac.SimpleSelector;


/**
 * @author <a href="mailto:davidsch@users.sourceforge.net">David Schweinsberg</a>
 * @version $Id$
 */
public class SACParserCSS21 extends AbstractSACParser implements Parser, SACParserCSS21Constants {

    public SACParserCSS21() {
        this((CharStream) null);
    }

    public String getParserVersion() {
        return "http://www.w3.org/TR/CSS21/";
    }

    protected String getGrammarUri()
    {
        return "http://www.w3.org/TR/CSS21/grammar.html";
    }

    protected Token getToken()
    {
        return this.token;
    }

//
// stylesheet
//  : [ CHARSET_SYM STRING ';' ]?
//    [S|CDO|CDC]* [ import [S|CDO|CDC]* ]*
//    [ [ ruleset | media | page ] [S|CDO|CDC]* ]*
//  ;
//
  final public void styleSheet() throws ParseException {
    try {
          this.handleStartDocument();
      styleSheetRuleList();
      jj_consume_token(0);
    } finally {
        this.handleEndDocument();
    }
  }

  final public void styleSheetRuleList() throws ParseException {
  boolean ruleFound = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHARSET_SYM:
      charsetRule();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case CDO:
      case CDC:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        jj_consume_token(S);
        break;
      case CDO:
        jj_consume_token(CDO);
        break;
      case CDC:
        jj_consume_token(CDC);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
      case HASH:
      case IMPORT_SYM:
      case PAGE_SYM:
      case MEDIA_SYM:
      case DOT:
      case COLON:
      case ASTERISK:
      case LSQUARE:
      case ATKEYWORD:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT_SYM:
        importRule(ruleFound);
        break;
      case IDENT:
      case HASH:
      case PAGE_SYM:
      case MEDIA_SYM:
      case DOT:
      case COLON:
      case ASTERISK:
      case LSQUARE:
      case ATKEYWORD:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
        case HASH:
        case DOT:
        case COLON:
        case ASTERISK:
        case LSQUARE:
          styleRule();
          break;
        case MEDIA_SYM:
          mediaRule();
          break;
        case PAGE_SYM:
          pageRule();
          break;
        case ATKEYWORD:
          unknownRule();
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                ruleFound = true;
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case CDO:
        case CDC:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          jj_consume_token(S);
          break;
        case CDO:
          jj_consume_token(CDO);
          break;
        case CDC:
          jj_consume_token(CDC);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

//
// This is used by ASTStyleSheet.insertRule to parse a single rule
//
  final public void styleSheetRuleSingle() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      jj_consume_token(S);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHARSET_SYM:
      charsetRule();
      break;
    case IMPORT_SYM:
      importRule(false);
      break;
    case IDENT:
    case HASH:
    case DOT:
    case COLON:
    case ASTERISK:
    case LSQUARE:
      styleRule();
      break;
    case MEDIA_SYM:
      mediaRule();
      break;
    case PAGE_SYM:
      pageRule();
      break;
    case ATKEYWORD:
      unknownRule();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      jj_consume_token(S);
    }
  }

  final public void charsetRule() throws ParseException {
  Token t;
  Locator locator;
    try {
      jj_consume_token(CHARSET_SYM);
            locator = this.getLocator();
      jj_consume_token(S);
      t = jj_consume_token(STRING);
      jj_consume_token(SEMICOLON);
            this.handleCharset(t.toString(), locator);
    } catch (ParseException e) {
        this.getErrorHandler().error(
            this.toCSSParseException("invalidCharsetRule", e));
    }
  }

  final public void unknownRule() throws ParseException {
    Token t;
    String s;
    Locator locator;
    try {
      t = jj_consume_token(ATKEYWORD);
            locator = this.getLocator();
            s = skip();
            this.handleIgnorableAtRule(s, locator);
    } catch (ParseException e) {
        this.getErrorHandler().error(
            this.toCSSParseException("invalidUnknownRule", e));
    }
  }

//
// import
//  : IMPORT_SYM S*
//    [STRING|URI] S* [ medium [ COMMA S* medium]* ]? ';' S*
//  ;
//
  final public void importRule(boolean nonImportRuleFoundBefore) throws ParseException {
    Token t;
    SACMediaListImpl ml = new SACMediaListImpl();
    Locator locator;
    nonImportRuleFoundBefore=false;
    try {
            ParseException e = null;
            if (nonImportRuleFoundBefore)
            {
                e = generateParseException();
            }
      jj_consume_token(IMPORT_SYM);
            locator = this.getLocator();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        t = jj_consume_token(STRING);
        break;
      case URI:
        t = jj_consume_token(URI);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_7;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        mediaList(ml);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
            if (nonImportRuleFoundBefore)
            {
                getErrorHandler().error(toCSSParseException("invalidImportRuleIgnored2", e));
            }
            else
            {
                handleImportStyle(unescape(t.image, false), ml, null, locator);
            }
    } catch (CSSParseException e) {
        this.getErrorHandler().error(e);
        this.error_skipAtRule();
    } catch (ParseException e) {
        this.getErrorHandler().error(this.toCSSParseException("invalidImportRule", e));
        this.error_skipAtRule();
    }
  }

//
// media
//  : MEDIA_SYM S* medium [ COMMA S* medium ]* LBRACE S* ruleset* '}' S*
//  ;
//
  final public void mediaRule() throws ParseException {
    boolean start = false;
    SACMediaListImpl ml = new SACMediaListImpl();
    Locator locator;
    try {
      jj_consume_token(MEDIA_SYM);
            locator = this.getLocator();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_8;
        }
        jj_consume_token(S);
      }
      mediaList(ml);
            start = true;
            this.handleStartMedia(ml, locator);
      jj_consume_token(LBRACE);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_9;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
      case HASH:
      case IMPORT_SYM:
      case PAGE_SYM:
      case DOT:
      case COLON:
      case ASTERISK:
      case LSQUARE:
      case ATKEYWORD:
        mediaRuleList();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (CSSParseException e) {
        this.getErrorHandler().error(e);
        this.error_skipblock();
    } catch (ParseException e) {
        CSSParseException cpe = this.toCSSParseException("invalidMediaRule", e);
        this.getErrorHandler().error(cpe);
        this.getErrorHandler().warning(this.createSkipWarning("ignoringRule", cpe));
        this.error_skipblock();
    } finally {
        if (start) {
            this.handleEndMedia(ml);
        }
    }
  }

  final public void mediaList(SACMediaListImpl ml) throws ParseException {
    String s;
    try {
      s = medium();
            ml.setLocator(this.getLocator());
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[19] = jj_gen;
            break label_11;
          }
          jj_consume_token(S);
        }
                             ml.add(s);
        s = medium();
      }
          ml.add(s);
    } catch (ParseException e) {
        {if (true) throw this.toCSSParseException("invalidMediaList", e);}
    }
  }

  final public void mediaRuleList() throws ParseException {
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
      case HASH:
      case DOT:
      case COLON:
      case ASTERISK:
      case LSQUARE:
        styleRule();
        break;
      case PAGE_SYM:
        pageRule();
        break;
      case ATKEYWORD:
        unknownRule();
        break;
      case IMPORT_SYM:
        importRule(true);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_13;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
      case HASH:
      case IMPORT_SYM:
      case PAGE_SYM:
      case DOT:
      case COLON:
      case ASTERISK:
      case LSQUARE:
      case ATKEYWORD:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_12;
      }
    }
  }

  final public void mediaRuleSingle() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
    case HASH:
    case DOT:
    case COLON:
    case ASTERISK:
    case LSQUARE:
      styleRule();
      break;
    case PAGE_SYM:
      pageRule();
      break;
    case ATKEYWORD:
      unknownRule();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//
// medium
//   : IDENT S*
//   ;
//
  final public String medium() throws ParseException {
  Token t;
    t = jj_consume_token(IDENT);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_14;
      }
      jj_consume_token(S);
    }
        this.handleMedium(t.image, this.createLocator(t));
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

//
// page
//  : PAGE_SYM S* pseudo_page? S*
//    LBRACE S* declaration [ ';' S* declaration ]* '}' S*
//  ;
//
  final public void pageRule() throws ParseException {
    Token t = null;
    String s = null;
    boolean start = false;
    Locator locator;
    try {
      jj_consume_token(PAGE_SYM);
            locator = this.getLocator();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_15;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        s = pseudoPage();
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[26] = jj_gen;
            break label_16;
          }
          jj_consume_token(S);
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_17;
        }
        jj_consume_token(S);
      }
            start = true;
            this.handleStartPage((t != null) ? unescape(t.image, false) : null, s, locator);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        declaration();
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_18;
        }
        jj_consume_token(SEMICOLON);
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_19;
          }
          jj_consume_token(S);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          declaration();
          break;
        default:
          jj_la1[32] = jj_gen;
          ;
        }
      }
      jj_consume_token(RBRACE);
    } catch (CSSParseException e) {
        this.getErrorHandler().error(e);
        this.error_skipblock();
    } catch (ParseException e) {
        CSSParseException cpe = this.toCSSParseException("invalidPageRule", e);
        this.getErrorHandler().error(cpe);
        this.getErrorHandler().warning(this.createSkipWarning("ignoringRule", cpe));
        this.error_skipblock();
    } finally {
        if (start) {
            this.handleEndPage((t != null) ? unescape(t.image, false) : null, s);
        }
    }
  }

//
// pseudoPage
//   : ':' IDENT
//   ;
//
  final public String pseudoPage() throws ParseException {
  Token t;
    jj_consume_token(COLON);
    t = jj_consume_token(IDENT);
                        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

//
// operator
//  : '/' S* | COMMA S* | /* empty */
//  ;
//
  final public LexicalUnit operator(LexicalUnit prev) throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLASH:
      t = jj_consume_token(SLASH);
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_20;
        }
        jj_consume_token(S);
      }
                           {if (true) return new LexicalUnitImpl(prev, LexicalUnit.SAC_OPERATOR_SLASH);}
      break;
    case COMMA:
      t = jj_consume_token(COMMA);
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_21;
        }
        jj_consume_token(S);
      }
                           {if (true) return new LexicalUnitImpl(prev, LexicalUnit.SAC_OPERATOR_COMMA);}
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//
// combinator
//  : PLUS S*
//  | GREATER S*
//  | S
//  ;
//
  final public char combinator() throws ParseException {
  char c = ' ';
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
             c='+';
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_22;
        }
        jj_consume_token(S);
      }
      break;
    case GREATER:
      jj_consume_token(GREATER);
                c='>';
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_23;
        }
        jj_consume_token(S);
      }
      break;
    case S:
      jj_consume_token(S);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case GREATER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
                     c='+';
          break;
        case GREATER:
          jj_consume_token(GREATER);
                                            c='>';
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_24:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[39] = jj_gen;
            break label_24;
          }
          jj_consume_token(S);
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

//
// unary_operator
//  : '-' | PLUS
//  ;
//
  final public char unaryOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
              {if (true) return '-';}
      break;
    case PLUS:
      jj_consume_token(PLUS);
                                       {if (true) return '+';}
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//
// property
//   : IDENT S*
//   ;
//
  final public String property() throws ParseException {
    Token t;
    t = jj_consume_token(IDENT);
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_25;
      }
      jj_consume_token(S);
    }
      {if (true) return unescape(t.image, false);}
    throw new Error("Missing return statement in function");
  }

//
// ruleset
//  : selector [ COMMA S* selector ]*
//    LBRACE S* declaration [ ';' S* declaration ]* '}' S*
//  ;
//
  final public void styleRule() throws ParseException {
    SelectorList selList = null;
    boolean start = false;
    Token t;
    try {
            t = this.getToken();
      selList = selectorList();
      jj_consume_token(LBRACE);
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_26;
        }
        jj_consume_token(S);
      }
            start = true;
            this.handleStartSelector(selList, this.createLocator(t.next));
      styleDeclaration();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBRACE:
        jj_consume_token(RBRACE);
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (CSSParseException e) {
        this.getErrorHandler().error(e);
        this.getErrorHandler().warning(this.createSkipWarning("ignoringRule", e));
        this.error_skipblock();
    } catch (ParseException e) {
        CSSParseException cpe = this.toCSSParseException("invalidStyleRule", e);
        this.getErrorHandler().error(cpe);
        this.getErrorHandler().warning(this.createSkipWarning("ignoringFollowingDeclarations", cpe));
        this.error_skipblock();
    } finally {
        if (start) {
            this.handleEndSelector(selList);
        }
    }
  }

  final public SelectorList parseSelectorsInternal() throws ParseException {
    SelectorList selectors;
    selectors = selectorList();
    jj_consume_token(0);
        {if (true) return selectors;}
    throw new Error("Missing return statement in function");
  }

  final public SelectorList selectorList() throws ParseException {
    SelectorListImpl selList = new SelectorListImpl();
    Selector sel;
    sel = selector();
        if (sel instanceof Locatable)
        {
            selList.setLocator(((Locatable) sel).getLocator());
        }
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_27;
      }
      jj_consume_token(COMMA);
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_28;
        }
        jj_consume_token(S);
      }
                         selList.add(sel);
      sel = selector();
    }
        selList.add(sel);
        {if (true) return selList;}
    throw new Error("Missing return statement in function");
  }

//
// selector
//   : simple_selector [ combinator simple_selector ]*
//   ;
//
  final public Selector selector() throws ParseException {
    Selector sel;
    char comb;
    try {
      sel = simpleSelector(null, ' ');
      label_29:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_29;
        }
        comb = combinator();
        sel = simpleSelector(sel, comb);
      }
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_30;
        }
        jj_consume_token(S);
      }
            {if (true) return sel;}
    } catch (ParseException e) {
        {if (true) throw this.toCSSParseException("invalidSelector", e);}
        //skipSelector();

    }
    throw new Error("Missing return statement in function");
  }

//
// simple_selector
//  : element_name [ HASH | class | attrib | pseudo ]*
//  | [ HASH | class | attrib | pseudo ]+
//  ;
//
  final public Selector simpleSelector(Selector sel, char comb) throws ParseException {
    SimpleSelector simpleSel = null;
    Condition c = null;
    SimpleSelector pseudoElementSel = null;
    Object o = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
      case ASTERISK:
        simpleSel = elementName();
        label_31:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HASH:
          case DOT:
          case COLON:
          case LSQUARE:
            ;
            break;
          default:
            jj_la1[49] = jj_gen;
            break label_31;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HASH:
            c = hash(c);
            break;
          case DOT:
            c = _class(c);
            break;
          case LSQUARE:
            c = attrib(c);
            break;
          case COLON:
            o = pseudo(c);
            break;
          default:
            jj_la1[50] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      case HASH:
      case DOT:
      case COLON:
      case LSQUARE:
                simpleSel = this.getSelectorFactory().createElementSelector(null, null);
        label_32:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HASH:
            c = hash(c);
            break;
          case DOT:
            c = _class(c);
            break;
          case LSQUARE:
            c = attrib(c);
            break;
          case COLON:
            o = pseudo(c);
            break;
          default:
            jj_la1[51] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HASH:
          case DOT:
          case COLON:
          case LSQUARE:
            ;
            break;
          default:
            jj_la1[52] = jj_gen;
            break label_32;
          }
        }
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            if (o instanceof SimpleSelector)
            {
                pseudoElementSel = (SimpleSelector) o;
            }
            else if (o instanceof Condition)
            {
                c = (Condition) o;
            }
            if (c != null) {
                simpleSel = this.getSelectorFactory().createConditionalSelector(simpleSel, c);
            }

            if (sel != null) {
                switch (comb) {
                case ' ':
                    sel = this.getSelectorFactory().createDescendantSelector(sel, simpleSel);
                    break;
                case '+':
                    sel = this.getSelectorFactory().createDirectAdjacentSelector(sel.getSelectorType(), sel, simpleSel);
                    break;
                case '>':
                    sel = this.getSelectorFactory().createChildSelector(sel, simpleSel);
                    break;
                }
            } else {
                sel = simpleSel;
            }
            if (pseudoElementSel != null)
            {
                sel = this.getSelectorFactory().createDescendantSelector(sel, pseudoElementSel);
            }

            {if (true) return sel;}
    } catch (ParseException e) {
        {if (true) throw this.toCSSParseException("invalidSimpleSelector", e);}
    }
    throw new Error("Missing return statement in function");
  }

//
// class
//   : '.' IDENT
//   ;
//
  final public Condition _class(Condition pred) throws ParseException {
    Token t;
    Locator locator;
    try {
      jj_consume_token(DOT);
            locator = this.getLocator();
      t = jj_consume_token(IDENT);
            Condition c = this.getConditionFactory().createClassCondition(null, t.image);
            if (c instanceof Locatable)
            {
                ((Locatable) c).setLocator(locator);
            }
            {if (true) return (pred == null) ? c : this.getConditionFactory().createAndCondition(pred, c);}
    } catch (ParseException e) {
        {if (true) throw this.toCSSParseException("invalidClassSelector", e);}
    }
    throw new Error("Missing return statement in function");
  }

//
// element_name
//   : IDENT | '*'
//   ;
//
  final public SimpleSelector elementName() throws ParseException {
    Token t;
    SimpleSelector sel;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        t = jj_consume_token(IDENT);
            sel = this.getSelectorFactory().createElementSelector(null, unescape(t.image, false));
            if (sel instanceof Locatable)
            {
                ((Locatable) sel).setLocator(this.getLocator());
            }
            {if (true) return sel;}
        break;
      case ASTERISK:
        jj_consume_token(ASTERISK);
            sel = this.getSelectorFactory().createElementSelector(null, null);
            if (sel instanceof Locatable)
            {
                ((Locatable) sel).setLocator(this.getLocator());
            }
            {if (true) return sel;}
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        {if (true) throw this.toCSSParseException("invalidElementName", e);}
    }
    throw new Error("Missing return statement in function");
  }

//
// attrib
//   : '[' S* IDENT S* [ [ '=' | INCLUDES | DASHMATCH ] S*
//     [ IDENT | STRING ] S* ]? ']'
//   ;
//
  final public Condition attrib(Condition pred) throws ParseException {
    Token t;
    String name = null;
    String value = null;
    int type = 0;
    Locator locator;
    try {
      jj_consume_token(LSQUARE);
            locator = this.getLocator();
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[55] = jj_gen;
          break label_33;
        }
        jj_consume_token(S);
      }
      t = jj_consume_token(IDENT);
                      name = unescape(t.image, false);
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[56] = jj_gen;
          break label_34;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLUDES:
      case DASHMATCH:
      case EQUALS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUALS:
          jj_consume_token(EQUALS);
                           type = 1;
          break;
        case INCLUDES:
          jj_consume_token(INCLUDES);
                             type = 2;
          break;
        case DASHMATCH:
          jj_consume_token(DASHMATCH);
                              type = 3;
          break;
        default:
          jj_la1[57] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_35:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[58] = jj_gen;
            break label_35;
          }
          jj_consume_token(S);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          t = jj_consume_token(IDENT);
                              value = t.image;
          break;
        case STRING:
          t = jj_consume_token(STRING);
                               value = unescape(t.image, false);
          break;
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_36:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[60] = jj_gen;
            break label_36;
          }
          jj_consume_token(S);
        }
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      jj_consume_token(RSQUARE);
            Condition c = null;
            switch (type) {
            case 0:
                c = this.getConditionFactory().createAttributeCondition(name, null, false, null);
                break;
            case 1:
                c = this.getConditionFactory().createAttributeCondition(name, null, null != value, value);
                break;
            case 2:
                c = this.getConditionFactory().createOneOfAttributeCondition(name, null, null != value, value);
                break;
            case 3:
                c = this.getConditionFactory().createBeginHyphenAttributeCondition(name, null, null != value, value);
                break;
            }
            if (c instanceof Locatable)
            {
                ((Locatable) c).setLocator(locator);
            }
            {if (true) return (pred == null) ? c : this.getConditionFactory().createAndCondition(pred, c);}
    } catch (ParseException e) {
        {if (true) throw this.toCSSParseException("invalidAttrib", e);}
    }
    throw new Error("Missing return statement in function");
  }

//
// pseudo
//  : ':' [ IDENT | FUNCTION S* IDENT? S* ')' ]
//  ;
//
  final public Object pseudo(Condition pred) throws ParseException {
    SimpleSelector pseudoElementSel = null;
    Condition c = null;
    Token t;
    String function;
    String arg = "";
    Locator locator;
    try {
      jj_consume_token(COLON);
            locator = this.getLocator();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        t = jj_consume_token(IDENT);
                String s = t.image;
                if ("first-line".equals(s)
                    || "first-letter".equals(s)
                    || "before".equals(s)
                    || "after".equals(s))
                {
                    pseudoElementSel = this.getSelectorFactory().createPseudoElementSelector(null, s);
                }
                else
                {
                    c = this.getConditionFactory().createPseudoClassCondition(null, s);
                }
                if (pseudoElementSel != null)
                {
                    if (pseudoElementSel instanceof Locatable)
                    {
                        ((Locatable) pseudoElementSel).setLocator(locator);
                    }
                    {if (true) return pseudoElementSel;}
                }
                if (c instanceof Locatable)
                {
                    ((Locatable) c).setLocator(locator);
                }
                {if (true) return (pred == null)
                    ? c
                    : this.getConditionFactory().createAndCondition(pred, c);}
        break;
      case FUNCTION:
        t = jj_consume_token(FUNCTION);
                                 function = unescape(t.image, false);
        label_37:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[62] = jj_gen;
            break label_37;
          }
          jj_consume_token(S);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          t = jj_consume_token(IDENT);
                               arg = unescape(t.image, false);
          label_38:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S:
              ;
              break;
            default:
              jj_la1[63] = jj_gen;
              break label_38;
            }
            jj_consume_token(S);
          }
          break;
        default:
          jj_la1[64] = jj_gen;
          ;
        }
        jj_consume_token(RROUND);
                    if (function.equalsIgnoreCase("lang(")) {
                        c = this.getConditionFactory().createLangCondition(unescape(arg, false));
                        if (c instanceof Locatable)
                        {
                            ((Locatable) c).setLocator(locator);
                        }
                        {if (true) return (pred == null)
                            ? c
                            : this.getConditionFactory().createAndCondition(pred, c);}
                    } else {
                        c = this.getConditionFactory().createPseudoClassCondition(null, function + arg + ")");
                        if (c instanceof Locatable)
                        {
                            ((Locatable) c).setLocator(locator);
                        }
                        {if (true) return (pred == null)
                            ? c
                            : this.getConditionFactory().createAndCondition(pred, c);}
                    }
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        {if (true) throw this.toCSSParseException("invalidPseudo", e);}
    }
    throw new Error("Missing return statement in function");
  }

  final public Condition hash(Condition pred) throws ParseException {
    Token t;
    try {
      t = jj_consume_token(HASH);
            Condition c = this.getConditionFactory().createIdCondition(unescape(t.image.substring(1), false));
            if (c instanceof Locatable)
            {
                ((Locatable) c).setLocator(this.getLocator());
            }
            {if (true) return (pred == null) ? c : this.getConditionFactory().createAndCondition(pred, c);}
    } catch (ParseException e) {
        {if (true) throw this.toCSSParseException("invalidHash", e);}
    }
    throw new Error("Missing return statement in function");
  }

  final public void styleDeclaration() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        declaration();
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[67] = jj_gen;
          break label_39;
        }
        jj_consume_token(SEMICOLON);
        label_40:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
            ;
            break;
          default:
            jj_la1[68] = jj_gen;
            break label_40;
          }
          jj_consume_token(S);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          declaration();
          break;
        default:
          jj_la1[69] = jj_gen;
          ;
        }
      }
    } catch (ParseException ex) {
        this.getErrorHandler().error(this.toCSSParseException("invalidDeclaration", ex));
        error_skipdecl();
    }
  }

//
// declaration
//   : property ':' S* expr prio?
//   |
//   ;
//
  final public void declaration() throws ParseException {
  String p;
  LexicalUnit e;
  boolean priority = false;
  Locator locator = null;
    try {
      p = property();
            locator = this.getLocator();
      jj_consume_token(COLON);
      label_41:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
          ;
          break;
        default:
          jj_la1[70] = jj_gen;
          break label_41;
        }
        jj_consume_token(S);
      }
      e = expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORTANT_SYM:
        priority = prio();
        break;
      default:
        jj_la1[71] = jj_gen;
        ;
      }
            this.handleProperty(p, e, priority, locator);
    } catch (CSSParseException ex) {
        this.getErrorHandler().error(ex);
        error_skipdecl();
    } catch (ParseException ex) {
        this.getErrorHandler().error(this.toCSSParseException("invalidDeclaration", ex));
        error_skipdecl();
    }
  }

//
// prio
//   : IMPORTANT_SYM S*
//   ;
  final public boolean prio() throws ParseException {
    jj_consume_token(IMPORTANT_SYM);
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[72] = jj_gen;
        break label_42;
      }
      jj_consume_token(S);
    }
    {if (true) return true;}
    throw new Error("Missing return statement in function");
  }

//
// expr
//   : term [ operator term ]*
//   ;
//
// TODO: Deal with the operator
//
  final public LexicalUnit expr() throws ParseException {
    LexicalUnit head;
    LexicalUnit body;
    try {
      head = term(null);
                            body = head;
      label_43:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case INHERIT:
        case IDENT:
        case STRING:
        case PLUS:
        case COMMA:
        case HASH:
        case EMS:
        case EXS:
        case LENGTH_PX:
        case LENGTH_CM:
        case LENGTH_MM:
        case LENGTH_IN:
        case LENGTH_PT:
        case LENGTH_PC:
        case ANGLE_DEG:
        case ANGLE_RAD:
        case ANGLE_GRAD:
        case TIME_MS:
        case TIME_S:
        case FREQ_HZ:
        case FREQ_KHZ:
        case DIMENSION:
        case PERCENTAGE:
        case URI:
        case FUNCTION:
        case SLASH:
        case MINUS:
          ;
          break;
        default:
          jj_la1[73] = jj_gen;
          break label_43;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
        case SLASH:
          body = operator(body);
          break;
        default:
          jj_la1[74] = jj_gen;
          ;
        }
        body = term(body);
      }
          {if (true) return head;}
    } catch (ParseException ex) {
        {if (true) throw this.toCSSParseException("invalidExpr", ex);}
    }
    throw new Error("Missing return statement in function");
  }

//
// term
//  : unary_operator?
//    [ NUMBER S* | PERCENTAGE S* | LENGTH S* | EMS S* | EXS S* | ANGLE S* |
//      TIME S* | FREQ S* ]
//  | STRING S* | IDENT S* | URI S* | hexcolor | function
//  ;
//
  final public LexicalUnit term(LexicalUnit prev) throws ParseException {
  Token t;
  char op = ' ';
  String s;
  LexicalUnit value = null;
  Locator locator = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      op = unaryOperator();
      break;
    default:
      jj_la1[75] = jj_gen;
      ;
    }
        if (op != ' ')
        {
            locator = this.getLocator();
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case EMS:
    case EXS:
    case LENGTH_PX:
    case LENGTH_CM:
    case LENGTH_MM:
    case LENGTH_IN:
    case LENGTH_PT:
    case LENGTH_PC:
    case ANGLE_DEG:
    case ANGLE_RAD:
    case ANGLE_GRAD:
    case TIME_MS:
    case TIME_S:
    case FREQ_HZ:
    case FREQ_KHZ:
    case PERCENTAGE:
    case FUNCTION:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        t = jj_consume_token(NUMBER);
            try
            {
                value = LexicalUnitImpl.createNumber(prev, intValue(op, t.image));
            }
            catch (NumberFormatException e)
            {
                value = LexicalUnitImpl.createNumber(prev, floatValue(op, t.image));
            }
        break;
      case PERCENTAGE:
        t = jj_consume_token(PERCENTAGE);
                              value = LexicalUnitImpl.createPercentage(prev, floatValue(op, t.image));
        break;
      case LENGTH_PX:
        t = jj_consume_token(LENGTH_PX);
                              value = LexicalUnitImpl.createPixel(prev, floatValue(op, t.image));
        break;
      case LENGTH_CM:
        t = jj_consume_token(LENGTH_CM);
                              value = LexicalUnitImpl.createCentimeter(prev, floatValue(op, t.image));
        break;
      case LENGTH_MM:
        t = jj_consume_token(LENGTH_MM);
                              value = LexicalUnitImpl.createMillimeter(prev, floatValue(op, t.image));
        break;
      case LENGTH_IN:
        t = jj_consume_token(LENGTH_IN);
                              value = LexicalUnitImpl.createInch(prev, floatValue(op, t.image));
        break;
      case LENGTH_PT:
        t = jj_consume_token(LENGTH_PT);
                              value = LexicalUnitImpl.createPoint(prev, floatValue(op, t.image));
        break;
      case LENGTH_PC:
        t = jj_consume_token(LENGTH_PC);
                              value = LexicalUnitImpl.createPica(prev, floatValue(op, t.image));
        break;
      case EMS:
        t = jj_consume_token(EMS);
                              value = LexicalUnitImpl.createEm(prev, floatValue(op, t.image));
        break;
      case EXS:
        t = jj_consume_token(EXS);
                              value = LexicalUnitImpl.createEx(prev, floatValue(op, t.image));
        break;
      case ANGLE_DEG:
        t = jj_consume_token(ANGLE_DEG);
                              value = LexicalUnitImpl.createDegree(prev, floatValue(op, t.image));
        break;
      case ANGLE_RAD:
        t = jj_consume_token(ANGLE_RAD);
                              value = LexicalUnitImpl.createRadian(prev, floatValue(op, t.image));
        break;
      case ANGLE_GRAD:
        t = jj_consume_token(ANGLE_GRAD);
                              value = LexicalUnitImpl.createGradian(prev, floatValue(op, t.image));
        break;
      case TIME_MS:
        t = jj_consume_token(TIME_MS);
                              value = LexicalUnitImpl.createMillisecond(prev, floatValue(op, t.image));
        break;
      case TIME_S:
        t = jj_consume_token(TIME_S);
                              value = LexicalUnitImpl.createSecond(prev, floatValue(op, t.image));
        break;
      case FREQ_HZ:
        t = jj_consume_token(FREQ_HZ);
                              value = LexicalUnitImpl.createHertz(prev, floatValue(op, t.image));
        break;
      case FREQ_KHZ:
        t = jj_consume_token(FREQ_KHZ);
                              value = LexicalUnitImpl.createKiloHertz(prev, floatValue(op, t.image));
        break;
      case FUNCTION:
        value = function(prev);
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case STRING:
      t = jj_consume_token(STRING);
                              value = new LexicalUnitImpl(prev, LexicalUnit.SAC_STRING_VALUE, unescape(t.image, false));
      break;
    case IDENT:
      t = jj_consume_token(IDENT);
                              value = new LexicalUnitImpl(prev, LexicalUnit.SAC_IDENT, t.image);
      break;
    case URI:
      t = jj_consume_token(URI);
                              value = new LexicalUnitImpl(prev, LexicalUnit.SAC_URI, unescape(t.image, true));
      break;
    case HASH:
      value = hexcolor(prev);
      break;
    case DIMENSION:
      t = jj_consume_token(DIMENSION);
        int n = getLastNumPos(t.image);
        value = LexicalUnitImpl.createDimension(
            prev,
            floatValue(op, t.image.substring(0, n+1)),
            t.image.substring(n+1));
      break;
    case INHERIT:
      t = jj_consume_token(INHERIT);
                              value = new LexicalUnitImpl(prev, LexicalUnit.SAC_INHERIT, t.image);
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if (locator == null)
        {
            locator = this.getLocator();
        }
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[78] = jj_gen;
        break label_44;
      }
      jj_consume_token(S);
    }
        if (value instanceof Locatable)
        {
            ((Locatable) value).setLocator(locator);
        }
        {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

//
// function
//   : FUNCTION S* expr ')' S*
//   ;
//
  final public LexicalUnit function(LexicalUnit prev) throws ParseException {
    Token t;
    LexicalUnit params;
    t = jj_consume_token(FUNCTION);
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[79] = jj_gen;
        break label_45;
      }
      jj_consume_token(S);
    }
    params = expr();
    jj_consume_token(RROUND);
        {if (true) return this.functionInternal(prev, t, params);}
    throw new Error("Missing return statement in function");
  }

//
// hexcolor
//   : HASH S*
//   ;
//
  final public LexicalUnit hexcolor(LexicalUnit prev) throws ParseException {
    Token t;
    t = jj_consume_token(HASH);
        {if (true) return this.hexcolorInternal(prev, t);}
    throw new Error("Missing return statement in function");
  }

  void skipSelector() throws ParseException {
    Token t = getToken(1);
    while (t.kind != COMMA && t.kind != SEMICOLON && t.kind != LBRACE && t.kind != EOF ) {
        getNextToken();
        t = getToken(1);
    }
  }

  String skip() throws ParseException {
  StringBuilder sb = new StringBuilder();
  int nesting = 0;
  Token t = getToken(0);
  if (t.image != null) {
    sb.append(t.image);
  }
  do {
    t = getNextToken();
    if (t.kind == EOF)
      break;
    sb.append(t.image);
    if (t.kind == LBRACE)
      nesting++;
    else if (t.kind == RBRACE)
      nesting--;
    else if (t.kind == SEMICOLON && nesting <= 0)
      break;
  }
  while ((t.kind != RBRACE) || (nesting > 0));

  return sb.toString();
  }

  void error_skipblock() throws ParseException {
    Token t;
    int nesting = 0;
    do
    {
        t = getNextToken();
        if (t.kind == LBRACE)
        {
            nesting++;
        }
        else if (t.kind == RBRACE)
        {
            nesting--;
        }
        else if (t.kind == EOF)
        {
            break;
        }
    }
    while ((t.kind != RBRACE) || (nesting > 0));
  }

  void error_skipdecl() throws ParseException {
    int nesting = 0;
    Token t = getToken(1);
    if (t.kind == LBRACE)
    {
        error_skipblock();
    }
    else if (t.kind == RBRACE)
    {
        // next will be RBRACE so we are finished
        return;
    }
    else
    {
        Token oldToken = t;
        while (t.kind != SEMICOLON && t.kind != RBRACE && t.kind != EOF )
        {
            oldToken = t;
            t = getNextToken();
        }
        if (t.kind == RBRACE)
        {
            token = oldToken;
        }
    }
  }

  void error_skipAtRule() throws ParseException {
    Token t = null;
    do
    {
        t = getNextToken();
    }
    while (t.kind != SEMICOLON && t.kind != EOF);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(S)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(GREATER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(1)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(PLUS)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(1)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_46()) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    if (jj_3R_55()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(HASH)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(LSQUARE)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SACParserCSS21TokenManager token_source;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[80];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x2,0x2,0x80000,0x80000,0x80000,0x2,0x2,0x2,0x80000,0x2,0x2,0x400000,0x2,0x80000,0x2,0x2,0x80000,0x0,0x2,0x80000,0x2,0x80000,0x80000,0x2,0x2,0x2,0x0,0x2,0x80000,0x0,0x2,0x80000,0x2,0x2,0x0,0x2,0x2,0x0,0x2,0x0,0x2,0x0,0x2,0x2,0x1,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x80000,0x80000,0x2,0x2,0x0,0x2,0x480000,0x2,0x0,0x2,0x2,0x80000,0x80000,0x80000,0x0,0x2,0x80000,0x2,0x0,0x2,0x4e0000,0x0,0x0,0x20000,0x4e0000,0x2,0x2,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x200000,0x600,0x600,0x1e0000,0x1a0000,0x1e0000,0x600,0x600,0x0,0x3e0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0000,0x10000,0x0,0xe0000,0x0,0xe0000,0xa0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0xc000,0x0,0xc000,0xc000,0x4000,0x0,0x0,0x0,0x10000,0x0,0x0,0x20000,0x20000,0x20000,0x20000,0x20000,0x0,0x0,0x0,0x1800,0x0,0x0,0x0,0x1800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0xff834000,0x10000,0x4000,0xff800000,0xff820000,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x246800,0x246800,0x246800,0x0,0x0,0x0,0x246800,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x246800,0x0,0x0,0x246800,0x0,0x246800,0x246800,0x0,0x0,0x0,0x2000,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x400,0x0,0x0,0x0,0x42800,0x42800,0x42800,0x42800,0x46800,0x4000,0x0,0x0,0x20000,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x200,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x183ff,0x8000,0x10000,0x2bf,0x3ff,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with user supplied CharStream. */
  public SACParserCSS21(CharStream stream) {
    token_source = new SACParserCSS21TokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SACParserCSS21(SACParserCSS21TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SACParserCSS21TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[87];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 80; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 87; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
